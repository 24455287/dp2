		void DoExportBackupFile(string strOutputFileName)
		{
			string strError = "";

			FileStream outputfile = null;
			bool bAppend = true;

			if (textBox_dbPath.Text == "")
			{
				MessageBox.Show(this, "尚未选择源库...");
				return;
			}

			ResPath respath = new ResPath(textBox_dbPath.Text);

			channel = this.Channels.GetChannel(respath.Url);

			string strDbName = respath.Path;

			if (strOutputFileName != null && strOutputFileName != "") 
			{
				// 探测文件是否存在
				FileInfo fi = new FileInfo(strOutputFileName);
				bAppend = true;
				if (fi.Exists == true && fi.Length > 0)
				{
					DialogResult result = MessageBox.Show(this,
						"文件 '" + strOutputFileName + "' 已存在，是否追加?\r\n\r\n--------------------\r\n注：(是)追加  (否)覆盖  (取消)退出程序",
						"dp2batch",
						MessageBoxButtons.YesNoCancel,
						MessageBoxIcon.Question,
						MessageBoxDefaultButton.Button1);
					if (result == DialogResult.Yes) 
					{
						bAppend = true;
					}
					if (result == DialogResult.No) 
					{
						bAppend = false;
					}
					if (result == DialogResult.Cancel) 
					{
						strError = "放弃处理...";
						goto ERROR1;
					}
				}

				// 打开文件

				outputfile = File.Open(
					strOutputFileName,
					FileMode.OpenOrCreate,	// 原来是Open，后来修改为OpenOrCreate。这样对临时文件被系统管理员手动意外删除(但是xml文件中仍然记载了任务)的情况能够适应。否则会抛出FileNotFoundException异常
					FileAccess.Write,
					FileShare.ReadWrite);
			}


			try 
			{
				if (outputfile != null) 
				{
					if (bAppend == true)
						outputfile.Seek(0, SeekOrigin.End);	// 具有追加的能力
					else 
						outputfile.SetLength(0);
				}


				Int64 nStart;
				Int64 nEnd;
				Int64 nCur;
				bool bAsc = GetDirection(out nStart,
					out nEnd);

				// 设置进度条范围
				Int64 nMax = nEnd - nStart;
				if (nMax < 0)
					nMax *= -1;
				nMax ++;

				ProgressRatio =  nMax / 10000;
				if (ProgressRatio < 1.0)
					ProgressRatio = 1.0;

				progressBar_main.Minimum = 0;
				progressBar_main.Maximum = (int)(nMax/ProgressRatio);
				progressBar_main.Value = 0;


				bool bFirst = true;	// 是否为第一次取记录

				string strID = this.textBox_startNo.Text;


				stop.Initial(new Delegate_doStop(this.DoStop),
					"正在导出数据");
				stop.BeginLoop();

				EnableControls(false);


				// 循环
				for(;;) 
				{
					Application.DoEvents();	// 出让界面控制权

					if (stop.State != 0)
					{
						strError = "用户中断";
						goto ERROR1;
					}

					string strStyle = "";
					if (outputfile != null)
						strStyle = "data,content,timestamp,outputpath";
					else
						strStyle = "timestamp,outputpath";	// 优化

					if (bFirst == true)
						strStyle += "";
					else 
					{
						if (bAsc == true)
							strStyle += ",next";
						else
							strStyle += ",prev";
					}


					string strPath = strDbName + "/" + strID;
					string strXmlBody = "";
					string strMetaData = "";
					byte[] baOutputTimeStamp = null;
					string strOutputPath = "";

					bool bFoundRecord = false;

					// 获得资源
					// return:
					//		-1	出错。具体出错原因在this.ErrorCode中。this.ErrorInfo中有出错信息。
					//		0	成功
					long lRet = channel.GetRes(strPath,
						strStyle,
						out strXmlBody,
						out strMetaData,
						out baOutputTimeStamp,
						out strOutputPath,
						out strError);


					if (lRet == -1) 
					{
						if (channel.ErrorCode == ChannelErrorCode.NotFound) 
						{
							if (checkBox_forceLoop.Checked == true && bFirst == true)
							{
								AutoCloseMessageBox.Show(this, "记录 " + strID + " 不存在。\r\n\r\n按 确认 继续。");

								bFirst = false;
								goto CONTINUE;
							}
							else 
							{
								if (bFirst == true)
								{
									strError = "记录 " + strID + " 不存在。处理结束。";
								}
								else 
								{
									if (bAsc == true)
										strError = "记录 " + strID + " 是最末一条记录。处理结束。";
									else
										strError = "记录 " + strID + " 是最前一条记录。处理结束。";
								}							
							}

						}
						else if (channel.ErrorCode == ChannelErrorCode.EmptyRecord) 
						{
							bFirst = false;
							bFoundRecord = false;
							// 把id解析出来
							strID = ResPath.GetRecordId(strOutputPath);
							goto CONTINUE;

						}

						goto ERROR1;
					}

					bFirst = false;

					bFoundRecord = true;

					// 把id解析出来
					strID = ResPath.GetRecordId(strOutputPath);

				CONTINUE:

					// 是否超过循环范围
					try 
					{
						nCur = Convert.ToInt64(strID);
					}
					catch
					{
						// ???
						nCur = 0;
					}

					if (bAsc == true && nCur > nEnd)
						break;
					if (bAsc == false && nCur < nEnd)
						break;

					if (bFoundRecord == true 
						&& outputfile != null) 
					{
						// 写磁盘
						int nRet = WriteRecordToBackupFile(
							outputfile,
							strDbName,
							strID,
							strMetaData,
							strXmlBody,
							baOutputTimeStamp,
							out strError);
						if (nRet == -1) 
						{
							// 询问是否继续
							goto ERROR1;
						}
					}

					// 删除
					if (checkBox_export_delete.Checked == true)
					{

						byte [] baOutputTimeStamp1 = null;
						strPath = strOutputPath;	// 得到实际的路径
						lRet = channel.DoDeleteRecord(
							strPath,
							baOutputTimeStamp,
							out baOutputTimeStamp1,
							out strError);
						if (lRet == -1) 
						{
							// 询问是否继续
							goto ERROR1;
						}
						stop.SetMessage("已删除记录" + strPath);
					}


					if (bAsc == true) 
					{
						progressBar_main.Value = (int)((nCur-nStart + 1)/ProgressRatio);
					}
					else 
					{
						// ?
						progressBar_main.Value = (int)((nStart-nCur + 1)/ProgressRatio);
					}


					// 对已经作过的进行判断
					if (bAsc == true && nCur >= nEnd)
						break;
					if (bAsc == false && nCur <= nEnd)
						break;


				}

				stop.EndLoop();
				stop.Initial(null, "");

				EnableControls(true);

			}

			finally 
			{
				if (outputfile != null) 
				{
					outputfile.Close();
					outputfile = null;
				}

			}

			END1:
				channel = null;
			if (checkBox_export_delete.Checked == true)
				MessageBox.Show(this, "数据导出和删除完成。");
			else
				MessageBox.Show(this, "数据导出完成。");
			return;

			ERROR1:

				stop.EndLoop();
			stop.Initial(null, "");

			EnableControls(true);


			channel = null;
			MessageBox.Show(this, strError);
			return;


			
		}

		void DoExportXmlFile(string strOutputFileName)
		{
			string strError = "";

			FileStream outputfile = null;
			XmlTextWriter writer = null;   

			if (textBox_dbPath.Text == "")
			{
				MessageBox.Show(this, "尚未选择源库...");
				return;
			}

			ResPath respath = new ResPath(textBox_dbPath.Text);

			channel = this.Channels.GetChannel(respath.Url);

			string strDbName = respath.Path;

			if (strOutputFileName != null && strOutputFileName != "") 
			{
				// 探测文件是否存在
				FileInfo fi = new FileInfo(strOutputFileName);
				if (fi.Exists == true && fi.Length > 0)
				{
					DialogResult result = MessageBox.Show(this,
						"文件 '" + strOutputFileName + "' 已存在，是否覆盖?\r\n\r\n--------------------\r\n注：(是)覆盖  (否)退出程序",
						"dp2batch",
						MessageBoxButtons.YesNo,
						MessageBoxIcon.Question,
						MessageBoxDefaultButton.Button2);
					if (result != DialogResult.Yes) 
					{
						strError = "放弃处理...";
						goto ERROR1;
					}
				}

				// 打开文件
				outputfile = File.Create(
					strOutputFileName);

				writer = new XmlTextWriter(outputfile, Encoding.UTF8);
				writer.Formatting = Formatting.Indented;
				writer.Indentation = 4;

			}


			try 
			{
				
				Int64 nStart;
				Int64 nEnd;
				Int64 nCur;
				bool bAsc = GetDirection(out nStart,
					out nEnd);

				// 设置进度条范围
				Int64 nMax = nEnd - nStart;
				if (nMax < 0)
					nMax *= -1;
				nMax ++;

				ProgressRatio =  nMax / 10000;
				if (ProgressRatio < 1.0)
					ProgressRatio = 1.0;

				progressBar_main.Minimum = 0;
				progressBar_main.Maximum = (int)(nMax/ProgressRatio);
				progressBar_main.Value = 0;


				bool bFirst = true;	// 是否为第一次取记录

				string strID = this.textBox_startNo.Text;


				stop.Initial(new Delegate_doStop(this.DoStop),
					"正在导出数据");
				stop.BeginLoop();

				EnableControls(false);

				if (writer != null) 
				{
					writer.WriteStartDocument();
					writer.WriteStartElement("dprms","collection","http://d-platform.com/dprms/");
					//writer.WriteStartElement("collection");
					//writer.WriteAttributeString("xmlns:marc",
					//	"http://www.loc.gov/MARC21/slim");

				}

				// 循环
				for(;;) 
				{
					Application.DoEvents();	// 出让界面控制权

					if (stop.State != 0)
					{
						strError = "用户中断";
						goto ERROR1;
					}

					string strStyle = "";
					if (outputfile != null)
						strStyle = "data,content,timestamp,outputpath";
					else
						strStyle = "timestamp,outputpath";	// 优化

					if (bFirst == true)
						strStyle += "";
					else 
					{
						if (bAsc == true)
							strStyle += ",next";
						else
							strStyle += ",prev";
					}


					string strPath = strDbName + "/" + strID;
					string strXmlBody = "";
					string strMetaData = "";
					byte[] baOutputTimeStamp = null;
					string strOutputPath = "";

					bool bFoundRecord = false;

					// 获得资源
					// return:
					//		-1	出错。具体出错原因在this.ErrorCode中。this.ErrorInfo中有出错信息。
					//		0	成功
					long lRet = channel.GetRes(strPath,
						strStyle,
						out strXmlBody,
						out strMetaData,
						out baOutputTimeStamp,
						out strOutputPath,
						out strError);


					if (lRet == -1) 
					{
						if (channel.ErrorCode == ChannelErrorCode.NotFound) 
						{
							if (checkBox_forceLoop.Checked == true && bFirst == true)
							{
								AutoCloseMessageBox.Show(this, "记录 " + strID + " 不存在。\r\n\r\n按 确认 继续。");

								bFirst = false;
								goto CONTINUE;
							}
							else 
							{
								if (bFirst == true)
								{
									strError = "记录 " + strID + " 不存在。处理结束。";
								}
								else 
								{
									if (bAsc == true)
										strError = "记录 " + strID + " 是最末一条记录。处理结束。";
									else
										strError = "记录 " + strID + " 是最前一条记录。处理结束。";
								}
							}

						}
						else if (channel.ErrorCode == ChannelErrorCode.EmptyRecord) 
						{
							bFirst = false;
							bFoundRecord = false;
							// 把id解析出来
							strID = ResPath.GetRecordId(strOutputPath);
							goto CONTINUE;

						}

						goto ERROR1;
					}

					bFirst = false;

					bFoundRecord = true;

					// 把id解析出来
					strID = ResPath.GetRecordId(strOutputPath);

				CONTINUE:
					stop.SetMessage(strID);

					// 是否超过循环范围
					try 
					{
						nCur = Convert.ToInt64(strID);
					}
					catch
					{
						// ???
						nCur = 0;
					}

					if (bAsc == true && nCur > nEnd)
						break;
					if (bAsc == false && nCur < nEnd)
						break;

					if (bFoundRecord == true 
						&& writer != null) 
					{
						// 写磁盘
						XmlDocument dom = new XmlDocument();

						try 
						{
							dom.LoadXml(strXmlBody);

							ResPath respathtemp = new ResPath();
							respathtemp.Url = channel.Url;
							respathtemp.Path = strOutputPath;



							// DomUtil.SetAttr(dom.DocumentElement, "xmlns:dprms", "http://d-platform.com/dprms/");
							// 给根元素设置几个参数
							DomUtil.SetAttr(dom.DocumentElement, "path", "http://d-platform.com/dprms/", respathtemp.FullPath);
							DomUtil.SetAttr(dom.DocumentElement, "timestamp", "http://d-platform.com/dprms/", ByteArray.GetHexTimeStampString(baOutputTimeStamp));

							// DomUtil.SetAttr(dom.DocumentElement, "xmlns:marc", null);
							dom.DocumentElement.WriteTo(writer);
						}
						catch (Exception ex)
						{
							strError = ex.Message;
							// 询问是否继续
							goto ERROR1;
						}


						/*
						if (nRet == -1) 
						{
							// 询问是否继续
							goto ERROR1;
						}
						*/
					}

					// 删除
					if (checkBox_export_delete.Checked == true)
					{

						byte [] baOutputTimeStamp1 = null;
						strPath = strOutputPath;	// 得到实际的路径

						lRet = channel.DoDeleteRecord(
							strPath,
							baOutputTimeStamp,
							out baOutputTimeStamp1,
							out strError);
						if (lRet == -1) 
						{
							// 询问是否继续
							goto ERROR1;
						}
					}


					if (bAsc == true) 
					{
						progressBar_main.Value = (int)((nCur-nStart + 1)/ProgressRatio);
					}
					else 
					{
						// ?
						progressBar_main.Value = (int)((nStart-nCur + 1)/ProgressRatio);
					}


					// 对已经作过的进行判断
					if (bAsc == true && nCur >= nEnd)
						break;
					if (bAsc == false && nCur <= nEnd)
						break;


				}


				stop.EndLoop();
				stop.Initial(null, "");

				EnableControls(true);

			}

			finally 
			{
				if (writer != null) 
				{
					writer.WriteEndElement();
					writer.WriteEndDocument();
					writer.Close();
					writer = null;
				}

				if (outputfile != null) 
				{
					outputfile.Close();
					outputfile = null;
				}

			}

			END1:
				channel = null;
			if (checkBox_export_delete.Checked == true)
				MessageBox.Show(this, "数据导出和删除完成。");
			else
				MessageBox.Show(this, "数据导出完成。");
			return;

			ERROR1:

				stop.EndLoop();
			stop.Initial(null, "");

			EnableControls(true);


			channel = null;
			MessageBox.Show(this, strError);
			return;


			
		}



		~~~

				// 强制将ISO2709格式记录转换为字段数组
		// 本函数采用的算法是将目次区的地址和长度忽略，只取3字符的字段名
		// aResult的每个元素为byte[]型，内容是一个字段。第一个元素是头标区，一定是24bytes
		// return:
		//	-1	一般性错误
		//	-2	MARC格式错误
		public static int ForceCvt2709ToFieldArray(
            ref Encoding encoding,  // 2007/7/11 new add 函数内可能发生变化
            byte[] s,
            List<byte[]> aResult,
			out string strErrorInfo)
		{
			strErrorInfo = "";

            bool bUcs2 = false;
            if (encoding.Equals(Encoding.Unicode) == true)
                bUcs2 = true;

            if (bUcs2 == true)
            {
                string strRecord = encoding.GetString(s);

                // 变换成UTF-8编码方式处理
                s = Encoding.UTF8.GetBytes(strRecord);
                encoding = Encoding.UTF8;
            }

            MarcHeaderStruct header = null;
            try
            {
                header = new MarcHeaderStruct(encoding, s);
            }
            catch (ArgumentException)
            {
                // 不足 24 字符的，给与宽容
                header = new MarcHeaderStruct(Encoding.ASCII, Encoding.ASCII.GetBytes("012345678901234567890123"));
            }
			header.ForceUNIMARCHeader();	// 强制将某些位置设置为缺省值

#if NO
		{
			// 输出头标区
			byte[] tarray = null;
			tarray = new byte[24];
			Array.Copy(s, 0, tarray, 0, 24);
			aResult.Add(tarray);
		}
#endif
            // 2013/11/23
            aResult.Add(header.GetBytes());

			int somaxlen;
			int offs;
			int i,j;
	
			somaxlen = s.Length;

			//lenoffld = 4;

			//startposoffld=5;
	
			// 开始处理目次区
			// dirp = (char *)sopp;
			// t = 24;
			offs = 24;
			MyByteList baField = null;
			bool bFound = false;
			for(i=0;;i++) 
			{
				bFound = false;
				for(j=offs;j<offs+3+4+5;j++) 
				{
					if (j>= somaxlen)
						break;
					if (s[j] == FLDEND) 
					{
						bFound = true;
						break;
					}
				}

				if (j>=somaxlen) 
				{
					offs = j;
					break;
				}

				if (bFound == true) 
				{
					if (j<=offs+3) 
					{
						offs = j+1;
						break;
					}
				}


				// 将字段名装入目标
				baField = new MyByteList();
				baField.AddRange(s, offs, 3);

				aResult.Add(baField.GetByteArray());
				baField = null;
				// 得到字段内容开始地址
				offs += 3;
				offs += 4;
				offs += 5;

				if (bFound == true) 
				{
					offs = j+1;
					break;
				}

			}

			if (offs>=somaxlen) 
				return 0;

			int nFieldNumber = 1;
			baField = new MyByteList();
			// 加入对应的字段内容
			for(;offs<somaxlen;offs++) 
			{
                byte c = s[offs];

				if (offs>=somaxlen 
					|| s[offs] == FLDEND 
					|| s[offs] == RECEND) 
				{

					if (offs < somaxlen && s[offs] == RECEND) 
					{
						if (baField.Count == 0)
						{
							baField = null;
							break;
						}
					}

					// 加入一个字段内容
					while(nFieldNumber >= aResult.Count) 
					{
						byte[] baTemp0 = new byte[3];
						baTemp0[0] = (byte)'?';
						baTemp0[1] = (byte)'?';
						baTemp0[2] = (byte)'?';
						aResult.Add(baTemp0);
					}

					MyByteList baTemp = new MyByteList();
					baTemp.AddRange((byte[])aResult[nFieldNumber]);
					baTemp.AddRange(baField);

					aResult[nFieldNumber] = baTemp.GetByteArray();
					nFieldNumber ++;

					if (offs>=somaxlen) 
					{
						baField = null;
						break;
					}


					baField = new MyByteList();
				}
				else 
				{
					baField.Add(s[offs]);
				}

			}


			return 0;
			//		ERROR1:
			//			return -1;	// 一般性错误
			//		ERROR2:
			//			return -2;	// MARC格式错误
		}

		~~~

				// 强制将ISO2709格式记录转换为字段数组
		// 本函数采用的算法是将目次区的地址和长度忽略，只取3字符的字段名
		// aResult的每个元素为byte[]型，内容是一个字段。第一个元素是头标区，一定是24bytes
		// return:
		//	-1	一般性错误
		//	-2	MARC格式错误
		public static int ForceCvt2709ToFieldArray(
            ref Encoding encoding,  // 2007/7/11 new add 函数内可能发生变化
            byte[] s,
            List<byte[]> aResult,
			out string strErrorInfo)
		{
			strErrorInfo = "";

            bool bUcs2 = false;
            if (encoding.Equals(Encoding.Unicode) == true)
                bUcs2 = true;

            if (bUcs2 == true)
            {
                string strRecord = encoding.GetString(s);

                // 变换成UTF-8编码方式处理
                s = Encoding.UTF8.GetBytes(strRecord);
                encoding = Encoding.UTF8;
            }

            MarcHeaderStruct header = null;
            try
            {
                header = new MarcHeaderStruct(encoding, s);
            }
            catch (ArgumentException)
            {
                // 不足 24 字符的，给与宽容
                header = new MarcHeaderStruct(Encoding.ASCII, Encoding.ASCII.GetBytes("012345678901234567890123"));
            }
			header.ForceUNIMARCHeader();	// 强制将某些位置设置为缺省值

#if NO
		{
			// 输出头标区
			byte[] tarray = null;
			tarray = new byte[24];
			Array.Copy(s, 0, tarray, 0, 24);
			aResult.Add(tarray);
		}
#endif
            // 2013/11/23
            aResult.Add(header.GetBytes());

			int somaxlen;
			int offs;
			int i,j;
	
			somaxlen = s.Length;

			// 开始处理目次区
			offs = 24;
			MyByteList baField = null;
			bool bFound = false;
			for(i=0;;i++) 
			{
				bFound = false;
				for(j=offs;j<offs+3+4+5;j++) 
				{
					if (j>= somaxlen)
						break;
					if (s[j] == FLDEND) 
					{
						bFound = true;
						break;
					}
				}

				if (j>=somaxlen) 
				{
					offs = j;
					break;
				}

				if (bFound == true) 
				{
					if (j<=offs+3) 
					{
						offs = j+1;
						break;
					}
				}


				// 将字段名装入目标
				baField = new MyByteList();
				baField.AddRange(s, offs, 3);

				aResult.Add(baField.GetByteArray());
				baField = null;
				// 得到字段内容开始地址
				offs += 3;
				offs += 4;
				offs += 5;

				if (bFound == true) 
				{
					offs = j+1;
					break;
				}

			}

			if (offs>=somaxlen) 
				return 0;

			int nFieldNumber = 1;
			baField = new MyByteList();
			// 加入对应的字段内容
			for(;offs<somaxlen;offs++) 
			{
                byte c = s[offs];

				if (c == FLDEND || c == RECEND) 
				{

					if (c == RECEND) 
					{
						if (baField.Count == 0)
						{
							baField = null;
							break;
						}
					}

					// 加入一个字段内容
					while(nFieldNumber >= aResult.Count) 
					{
						byte[] baTemp0 = new byte[3];
						baTemp0[0] = (byte)'?';
						baTemp0[1] = (byte)'?';
						baTemp0[2] = (byte)'?';
						aResult.Add(baTemp0);
					}

					MyByteList baTemp = new MyByteList();
					baTemp.AddRange((byte[])aResult[nFieldNumber]);
					baTemp.AddRange(baField);

					aResult[nFieldNumber] = baTemp.GetByteArray();

					nFieldNumber ++;

					if (offs>=somaxlen) 
					{
						baField = null;
						break;
					}

					baField = new MyByteList();
				}
				else 
				{
					baField.Add(c);
				}
			}

			return 0;
			//		ERROR1:
			//			return -1;	// 一般性错误
			//		ERROR2:
			//			return -2;	// MARC格式错误
		}


				// 强制将ISO2709格式记录转换为字段数组
		// 本函数采用的算法是将目次区的地址和长度忽略，只取3字符的字段名
		// aResult的每个元素为byte[]型，内容是一个字段。第一个元素是头标区，一定是24bytes
		// return:
		//	-1	一般性错误
		//	-2	MARC格式错误
		public static int ForceCvt2709ToFieldArray(
            ref Encoding encoding,  // 2007/7/11 new add 函数内可能发生变化
            byte[] s,
            out List<byte[]> aResult1,
			out string strErrorInfo)
		{
			strErrorInfo = "";
            aResult1 = new List<byte[]>();

            List<MyByteList> results = new List<MyByteList>();

            bool bUcs2 = false;
            if (encoding.Equals(Encoding.Unicode) == true)
                bUcs2 = true;

            if (bUcs2 == true)
            {
                string strRecord = encoding.GetString(s);

                // 变换成UTF-8编码方式处理
                s = Encoding.UTF8.GetBytes(strRecord);
                encoding = Encoding.UTF8;
            }

            MarcHeaderStruct header = null;
            try
            {
                header = new MarcHeaderStruct(encoding, s);
            }
            catch (ArgumentException)
            {
                // 不足 24 字符的，给与宽容
                header = new MarcHeaderStruct(Encoding.ASCII, Encoding.ASCII.GetBytes("012345678901234567890123"));
            }
			header.ForceUNIMARCHeader();	// 强制将某些位置设置为缺省值

            results.Add(header.GetByteList());

			int somaxlen;
			int offs;
			int i,j;
	
			somaxlen = s.Length;

			// 开始处理目次区
			offs = 24;
			MyByteList baField = null;
			bool bFound = false;
			for(i=0;;i++) 
			{
				bFound = false;
				for(j=offs;j<offs+3+4+5;j++) 
				{
					if (j>= somaxlen)
						break;
					if (s[j] == FLDEND) 
					{
						bFound = true;
						break;
					}
				}

				if (j>=somaxlen) 
				{
					offs = j;
					break;
				}

				if (bFound == true) 
				{
					if (j<=offs+3) 
					{
						offs = j+1;
						break;
					}
				}


				// 将字段名装入目标
				baField = new MyByteList();
				baField.AddRange(s, offs, 3);

				results.Add(baField);
				baField = null;
				// 得到字段内容开始地址
				offs += 3;
				offs += 4;
				offs += 5;

				if (bFound == true) 
				{
					offs = j+1;
					break;
				}

			}

			if (offs>=somaxlen) 
				return 0;

			int nFieldNumber = 1;
			baField = new MyByteList();
			// 加入对应的字段内容
			for(;offs<somaxlen;offs++) 
			{
                byte c = s[offs];

				if (c == FLDEND || c == RECEND) 
				{

					if (c == RECEND) 
					{
						if (baField.Count == 0)
						{
							baField = null;
							break;
						}
					}

					// 加入一个字段内容
					while(nFieldNumber >= results.Count) 
					{
                        MyByteList temp = new MyByteList();
                        temp.Add((byte)'?');
                        temp.Add((byte)'?');
                        temp.Add((byte)'?');

						results.Add(temp);
					}

#if NO
					MyByteList baTemp = new MyByteList();
					baTemp.AddRange((byte[])aResult[nFieldNumber]);
					baTemp.AddRange(baField);
#endif

					results[nFieldNumber].AddRange(baField);

					nFieldNumber ++;

					if (offs>=somaxlen) 
					{
						baField = null;
						break;
					}

					baField = new MyByteList();
				}
				else 
				{
					baField.Add(c);
				}
			}

            aResult1 = new List<byte[]>();
            foreach (MyByteList list in results)
            {
                aResult1.Add(list.GetByteArray());
            }

			return 0;
			//		ERROR1:
			//			return -1;	// 一般性错误
			//		ERROR2:
			//			return -2;	// MARC格式错误
		}

1.让模板控件中的listview跟着动
用或(|)
完成

2.marcEditor的字体
使用control基类的Font
完成

3.二进制与十六进制，与，或

4.多选拉动字段名标题，报错信息
完成

~~~~~~~~~~~~~~~~~~~~~~~~
5.把多选修改一下
control 只是多加一项

6.给MarcEdior加调模板
完成

7.和谢老师一起开发程序
给字段加拼音
拼音大小写风格
给Field加一个Text属性，返回整个字段的值: 字段名 + 指示符 + 子字段内容，注意后面不加尾号
从面改造了一下GetFieldMarc()函数，加了一个布尔参数，指出是否加字段结束符。
完成

在加拼音的过程中还创建了一个拼音库，导入数据，写一个设拼音库的步骤，谢老师负责写。

8.加"定长模板"右键菜单，屏蔽TextBox的右键菜单，自己重写原有的菜单命令，好在TextBox提供了一些函数。
MyEdit的右键菜单如下:
撤消(&U)
--------
剪切(&I)
复制(&C)
粘贴(&P)
删除(&D)
--------
全选(&A)
--------
定长模板(&T)

'删除'与'全选'未完成，其它完成


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
加拼音脚本

using System;
using System.Windows.Forms;

using dp2rms;
using DigitalPlatform.Xml;
using DigitalPlatform.Marc;

public class MyHost : Host
{

	string [] cfgFields = new string [] {
		"200(a-9)",
		"701(a-9)",
		"711(a-9)",
		"702(a-9)",
		"712(a-9)"

	};

	public override void Main(object sender, HostEventArgs e)
	{
		ScriptActionCollection actions = new ScriptActionCollection();
		actions.NewItem("加拼音", "给.....加拼音", "AddPinyin");
		ScriptActionMenuDlg dlg = new ScriptActionMenuDlg();
		dlg.Actions = actions;
		dlg.ShowDialog();
		if (dlg.DialogResult == DialogResult.OK)
		{
			this.Invoke(dlg.SelectedAction.ScriptEntry);
		}
	}


	void AddPinyin()
	{
		PinyinStyle style = PinyinStyle.None;	// 在这里修改拼音大小写风格

		for(int i=0;i<DetailForm.MarcEditor.Record.Count;i++)
		{
			Field field = (Field)DetailForm.MarcEditor.Record[i];

			string strFrom = "";
			string strTo = "";
			int nRet = GetPinyinCfgLine(field.Name,
				out strFrom,
				out strTo);
			if (nRet != 1)
				continue;

			string strHanzi = "";
			string strNextSubfieldName = "";

			string strField = field.Text;

			nRet = MarcUtil.GetSubfield(strField,
				ItemType.Field,
				strFrom,
				0,
				out strHanzi,
				out strNextSubfieldName);
			if (nRet != 1)
				continue;
			if (strHanzi.Length <=1)
				continue;

			strHanzi = strHanzi.Substring(1);

			string strPinyin;
			string strError = "";
			nRet = this.DetailForm.HanziTextToPinyin(strHanzi,
				style,
				out strPinyin,
				out strError);
			if (nRet == -1)
			{
				MessageBox.Show(strError);
				break;
			}

			nRet = MarcUtil.ReplaceSubfield(
				ref strField,
				strTo,
				0,
				strTo + strPinyin);

			field.Text = strField;

		}


	}

	int GetPinyinCfgLine(string strFieldName,
		out string strFrom,
		out string strTo)
	{
		strFrom = "";
		strTo = "";
		for(int i=0;i<cfgFields.Length;i++)
		{
			string strLine = cfgFields[i];
			string strName = strLine.Substring(0,3);
			if (strName == strFieldName)
			{
				string strRight = strLine.Substring(3).Trim();

				if (strRight.Length == 0)
					return -1;
				if (strRight[0] == '(')
					strRight = strRight.Substring(1).Trim();
				if (strRight.Length == 0)
					return -1;
				if (strRight[strRight.Length-1] == ')')
					strRight = strRight.Substring(0, strRight.Length-1).Trim();
				if (strRight.Length == 0)
					return -1;

				int nRet = strRight.IndexOf("-");
				if (nRet == -1)
					return -1;
				strFrom = strRight.Substring(0, nRet).Trim();											strTo = strRight.Substring(nRet+1).Trim();
				return 1;

			}

		}

		return 0;		
	}
}


